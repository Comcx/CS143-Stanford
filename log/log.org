#+TITLE: Stanford CS143 Compilers course
#+AUTHOR: Comcx

* DONE [2/2] General introduction
** DONE Concepts of interpreter
Execute codes directly

** DONE Concepts of Compilers
Compile codes to another language...

* DONE Structure of *compilers*
- Lexical phase
- Parsing phase
- Senmantic analysis
- Optimization
- Code generation

* DONE Economy of programming languages
* DONE COOL overview
Example code to println "Hello, world!"
#+begin_src
class Main inherits IO {
  main(): Object {
    out_string("Hello, world!\n");
  };
};
#+end_src

* NEXT Lexical analysis
*String => Tokens*
where Tokens are in format < /class/, /string/ >

- *Goal* of lexical analysis
  - Recognize substrings corresponding to tokens
    - The _lexemes_
  - Identity the /token/ class of each lexeme

- Left to right scan => *lookahead* problem...

** NEXT [1/2] Regular languages
*Regular expression* specifies regular languages

*** DONE Syntax of Regular expression
- *Union* 
*A + B*

- *Concatenation*
*AB*

- *Iteration*
*A**

- Optional
*A?*

- At least one
*A+*

- Range
*[a-z]*

- Except
*[^a-z]*

*** NEXT Implementing regular expressions
**** NEXT Finite Automata
- An input alphabet \Sigma
- A finite set of states S
- A start state n
- A set of accepting states F \sube S
- A set of transitions State -> State





