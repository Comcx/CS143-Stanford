#+TITLE: Stanford CS143 Compilers course
#+AUTHOR: Comcx

* DONE [2/2] General introduction
** DONE Concepts of interpreter
Execute codes directly

** DONE Concepts of Compilers
Compile codes to another language...

* DONE Structure of *compilers*
- Lexical phase
- Parsing phase
- Senmantic analysis
- Optimization
- Code generation

* DONE Economy of programming languages
* DONE COOL overview
Example code to println "Hello, world!"
#+begin_src
class Main inherits IO {
  main(): Object {
    out_string("Hello, world!\n");
  };
};
#+end_src

* DONE Lexical analysis
*String => Tokens*
where Tokens are in format < /class/, /string/ >

- *Goal* of lexical analysis
  - Recognize substrings corresponding to tokens
    - The _lexemes_
  - Identity the /token/ class of each lexeme

- Left to right scan => *lookahead* problem...

** DONE [2/2] Regular languages
*Regular expression* specifies regular languages

*** DONE Syntax of Regular expression
- *Union* 
  *A + B*

- *Concatenation*
  *AB*

- *Iteration*
  *A**

- Optional
  *A?*

- At least one
  *A+*

- Range
  *[a-z]*

- Except
  *[^a-z]*

*** DONE Implementing regular expressions
**** DONE [2/2] Finite Automata
- An input alphabet \Sigma
- A finite set of states S
- A start state n
- A set of accepting states F \sube S
- A set of transitions State ->_input State

***** DONE Deteministic Finite Automata(DFA)
- One transition per input per state
- No \epsilon movement

***** DONE Nondeteministic Finite Automata(NFA)
- Can have multiple transitions for one input in a given state
- Can have \epsilon moves

**** DONE Regular expression => DFA
**** DONE DFA => NFA
**** DONE Table method

** DONE [2/2] Programming Assignment 1(PA1)
*** DONE Learning *FLEX*
- *Flex file format*
  #+begin_src c
%{
Declarations
%}
Definitions
%%
Rules
%%
User subroutines
  #+end_src

- *Patterns*

  In addition to characters and ranges of characters, 
  character classes can also contain character class expressions. 
  These are expressions enclosed inside ‘[:’ and ‘:]’ delimiters 
  (which themselves must appear between the ‘[’ and ‘]’ of the character class. 
  Other elements may occur inside the character class, too). The valid expressions are:
  #+begin_src
[:alnum:] [:alpha:] [:blank:]
[:cntrl:] [:digit:] [:graph:]
[:lower:] [:print:] [:punct:]
[:space:] [:upper:] [:xdigit:]
  #+end_src

*** DONE Language lexer
Instead of making a COOL lexer, I decide to design a better language COOLER
with its lexer.(I don't like COOL's syntax, like a mix of Scala and Haskell)

Finished <2019-01-28 Mon>

- COOLER Syntax:

  - Number: Integer, Real
  - String: "xxx"
  - Lambda: (lambda (param...) (expr))
  - => Syntax
  - : Type note
  - Lambda selectors

* NEXT Parsing
** DONE Top-down parsing
*** DONE Production normal form
*** DONE Decent recursive algorithm
*** DONE Left recursion
*** NEXT [/] Programming Assignment 2(PA2)


** NEXT Bottom-up parsing


